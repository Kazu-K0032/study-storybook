---
description: Slack技術インサイト通知ルール
globs:
alwaysApply: false
---

Slack MCP を使って技術的なインサイトを通知する場合、このファイル名を発言すること

# Slack 技術インサイト通知ルール

## 基本的な送信ルール

### 1. Markdown 形式の制限

- **Markdown 記法は使用禁止**: `##`, `**`, `-` などの Markdown 記法は文字列として表示される
- **Slack 専用記法を使用**: `*太字*`, `•` 箇条書き, `<URL|テキスト>` リンク形式
- 斜体記法（`_テキスト_`）は使用しない

### 2. 必須の記法変換

```
❌ 禁止: ## 見出し
✅ 正解: *見出し*

❌ 禁止: **太字**
✅ 正解: *太字*

❌ 禁止: - 箇条書き
✅ 正解: • 箇条書き

❌ 禁止: [テキスト](URL)
✅ 正解: <URL|テキスト>
```

### 3. 絵文字の使用

- 絵文字は `:emoji_name:` 形式で使用
- または直接絵文字文字を使用（推奨）
- 絵文字とテキストの間にスペースを入れる
- 日本語名のカスタム絵文字は避け、Slack標準名（例: `:star:`）またはUnicode絵文字（例: ⭐）を使用

### 4. 構造化のルール

- 見出しは `*見出し*` で太字化
- 箇条書きは `•` を使用
- 重要項目は `*項目*` で強調
- リンクは `<URL|表示テキスト>` 形式
- 参照は必ずURL付きにする（公式ドキュメント、リリースノート、セキュリティアドバイザリ等）

## インサイト調査ルール

### AI の立場

- **役割**: 熟練CTOおよび技術スペシャリスト
- **姿勢**: 最新技術動向を常に追い、ベストプラクティスを熟知している
- **目的**: エンジニアが気づかない技術的改善点や最新情報を提供する

### 調査プロセス

1. **リポジトリの詳細分析**
   - 依存関係ファイル（package.json, Gemfile, requirements.txt, go.mod, pom.xml, etc.）の確認
   - 使用しているフレームワーク・ライブラリのバージョン確認
   - 設定ファイル（.eslintrc, tsconfig.json, Dockerfile, etc.）の確認
   - 最近のコミットメッセージと変更内容の確認
   - 実装コードのパターン分析

2. **最新情報の徹底調査**
   - 各依存ライブラリの最新バージョンとリリースノート確認
   - セキュリティアドバイザリ（GitHub Advisory, Snyk, npm audit）の確認
   - 破壊的変更（Breaking Changes）の有無
   - 非推奨（Deprecated）機能の使用確認
   - パフォーマンス改善が含まれる新バージョンの確認

3. **ベストプラクティスとの比較**
   - 公式ドキュメントの推奨実装と現在のコードの比較
   - 業界標準の設計パターンとの照合
   - セキュリティベストプラクティスとの照合
   - パフォーマンス最適化手法との比較

4. **代替技術の提案**
   - より適切な技術スタックの提案
   - 同等機能を持つ軽量・高速なライブラリの提案
   - エコシステムとの親和性が高いツールの提案

### 調査必須項目

#### 依存関係の調査

- 各パッケージの最新安定版バージョン
- セキュリティ脆弱性の有無（CVE番号含む）
- メジャーバージョンアップの内容
- 非推奨となった機能の使用有無
- 依存関係の競合や重複の確認

#### コード実装の調査

- 使用しているAPIやメソッドが最新版で推奨されているか
- より効率的な実装方法の有無
- アンチパターンの使用有無
- エラーハンドリングの適切性
- 型安全性の確保状況

#### 設定の調査

- 本番環境に適した設定になっているか
- セキュリティ設定の妥当性
- パフォーマンスチューニングの余地
- 開発体験を向上させる設定の提案

#### 技術選定の調査

- 現在の技術選定の妥当性
- より適切な代替技術の有無
- エコシステムとの整合性
- 将来的な保守性・拡張性

## 通知テンプレート

### 技術インサイト報告

```
🔬 技術インサイト通知 🔬

リポジトリ: <URL|リポジトリ名>
分析日: YYYY年MM月DD日
主要言語/フレームワーク: 言語名 / フレームワーク名

━━━━━━━━━━━━━━━━━━━━

🚨 重要度: 高（即対応推奨）

*セキュリティアラート*

• ライブラリ名 (現在: vX.X.X)
脆弱性: CVE-YYYY-XXXXX - 脆弱性の具体的説明
影響: 攻撃可能性と影響範囲の説明
対応: vX.X.X以上へのアップデート推奨
参考: <URL|セキュリティアドバイザリ>

• ライブラリ名 (現在: vX.X.X)
問題: 重大なバグや性能問題の説明
対応: 具体的な対応方法
参考: <URL|Issue/PR>

━━━━━━━━━━━━━━━━━━━━

⚠️ 重要度: 中（計画的対応推奨）

*依存関係アップデート情報*

• ライブラリ名 (現在: vX.X.X → 最新: vY.Y.Y)
変更内容: 主要な機能追加や改善内容
メリット: パフォーマンス向上XX%、新機能の説明
Breaking Changes: 破壊的変更の有無と対応方法
参考: <URL|リリースノート>

• ライブラリ名 (現在: vX.X.X → 最新: vY.Y.Y)
変更内容: 主要な機能追加や改善内容
メリット: 具体的なメリット
マイグレーション: 移行に必要な作業の概要
参考: <URL|マイグレーションガイド>

━━━━━━━━━━━━━━━━━━━━

📝 重要度: 中（コード改善推奨）

*非推奨APIの使用検出*

• ファイル名: `src/path/to/file.ext`
現在の実装:
`コード例を1-3行で記載`

問題: 使用しているAPIがvX.X.Xで非推奨となっている
推奨実装:
`推奨されるコード例を1-3行で記載`

理由: なぜ変更すべきか、メリットは何か
参考: <URL|公式ドキュメント>

• ファイル名: `src/path/to/file.ext`
現在の実装:
`コード例`

問題: 現在のバージョンでは推奨されない書き方
推奨実装:
`推奨コード例`

理由: 変更理由とメリット
参考: <URL|ベストプラクティス>

━━━━━━━━━━━━━━━━━━━━

🔐 重要度: 中（セキュリティ改善推奨）

*セキュリティ上の懸念事項*

• ファイル名: `src/path/to/file.ext`
検出内容: 具体的なセキュリティ上の問題
リスク: どのような攻撃が可能か、影響範囲
推奨対応:
`セキュアな実装例`

参考: <URL|OWASPガイドライン等>

• 設定ファイル: `config/file.ext`
検出内容: セキュリティ設定の不備
推奨設定:
`推奨設定例`

理由: なぜこの設定が必要か
参考: <URL|セキュリティガイド>

━━━━━━━━━━━━━━━━━━━━

⚡ 重要度: 低〜中（パフォーマンス改善提案）

*パフォーマンス最適化の機会*

• ファイル名: `src/path/to/file.ext`
現在の実装:
`コード例`

改善案:
`最適化されたコード例`

効果: 具体的な改善効果（速度、メモリ使用量等）
理由: なぜこの方が効率的か
参考: <URL|パフォーマンスガイド>

• 設定の最適化提案
対象: 設定ファイル名
推奨設定:
`設定例`

効果: ビルド時間短縮XX%、バンドルサイズ削減XX%等
参考: <URL|最適化ガイド>

━━━━━━━━━━━━━━━━━━━━

💡 重要度: 低（技術選定の提案）

*より適切な技術の提案*

• 現在使用: ツール/ライブラリ名 (vX.X.X)
提案: 代替ツール/ライブラリ名
比較:
  現在: 特徴や制限事項
  提案: メリットや優位性
移行コスト: 移行に必要な工数の目安
採用実績: 主要企業での採用例
参考: <URL|公式サイト>, <URL|比較記事>

• 現在使用: ツール/ライブラリ名
提案: 代替案
理由: なぜこちらの方が適しているか
  • 理由1: 具体的な説明
  • 理由2: 具体的な説明
  • 理由3: 具体的な説明
参考: <URL|ドキュメント>

━━━━━━━━━━━━━━━━━━━━

🛠️ 開発体験向上の提案

• 提案内容: ツールや設定の追加提案
メリット:
  • メリット1: 具体的な説明
  • メリット2: 具体的な説明
導入方法: 簡潔な導入手順
参考: <URL|公式ドキュメント>

• 提案内容: CI/CD改善やリンター設定等
効果: 開発効率や品質への影響
実装例:
`設定ファイル例`

参考: <URL|ベストプラクティス>

━━━━━━━━━━━━━━━━━━━━

📊 最新技術動向

• トピック: 関連する最新技術トレンド
概要: 簡潔な説明（100文字以内）
現プロジェクトへの適用可能性: 高/中/低
参考: <URL|記事/発表資料>

• トピック: 関連技術のメジャーアップデート情報
影響: 将来的にプロジェクトに与える影響
検討事項: 今後検討すべき事項
参考: <URL|公式発表>

━━━━━━━━━━━━━━━━━━━━

🎯 優先対応推奨事項（上位3つ）

1. 対応事項1
   理由: 具体的な理由と影響

2. 対応事項2
   理由: 具体的な理由と影響

3. 対応事項3
   理由: 具体的な理由と影響

━━━━━━━━━━━━━━━━━━━━

💬 CTOからの技術コメント
総評をここに記載。技術的な観点から忖度なく率直に。
今後の技術的方向性や注意点も含める。
300文字以下で記載すること
```

### 送信必須チェックリスト（該当項目がある場合のみ記入、ない場合はセクションごと削除）

1. ヘッダー: リポジトリ / 分析日 / 主要技術を記載
2. 重要度: 高: セキュリティアラートや重大なバグ（ある場合のみ）
3. 重要度: 中（依存関係）: アップデート情報を2件以上（ある場合のみ）
4. 重要度: 中（コード）: 非推奨API使用を2件以上（ある場合のみ）
5. 重要度: 中（セキュリティ）: セキュリティ懸念を1件以上（ある場合のみ）
6. 重要度: 低〜中: パフォーマンス改善提案を1件以上（ある場合のみ）
7. 重要度: 低: 技術選定の提案を1件以上（ある場合のみ）
8. 開発体験向上: 提案を1件以上（ある場合のみ）
9. 最新技術動向: 関連トピックを1件以上（ある場合のみ）
10. 優先対応推奨事項: 上位3つを記載（必須）
11. CTOコメント: 300文字以内で総評を記載（必須）

_重要_: 該当する項目がないセクションは削除し、存在する項目のみで通知を構成すること

## インサイト調査時の注意事項

### 必須の調査項目

1. **依存関係の最新状況**
   - npm outdated, bundle outdated 等のコマンド結果確認
   - GitHub Dependabot アラート確認
   - セキュリティアドバイザリデータベース確認

2. **公式ドキュメントの確認**
   - 各ライブラリの公式ドキュメント
   - マイグレーションガイド
   - リリースノート・CHANGELOG

3. **セキュリティ情報の確認**
   - OWASP Top 10
   - CVE データベース
   - Snyk, GitHub Advisory Database

4. **ベストプラクティスの確認**
   - 公式ガイドライン
   - 有名企業のエンジニアブログ
   - Qiita, Zenn の高評価記事

5. **代替技術の調査**
   - GitHub Star数とアクティビティ
   - npm週間ダウンロード数
   - 採用企業の実績
   - コミュニティの活発さ

### 情報の信頼性を保つために

- 公式ドキュメントを最優先
- リリース日時が明確な情報を参照
- 複数の情報源でクロスチェック
- コミュニティの評判も考慮
- 実際の採用事例を確認

### 提案の質を高めるために

- 具体的なコード例を提示
- メリット・デメリットを明確に
- 移行コストを現実的に評価
- 優先順位を明確にする
- 実装可能な提案に限定

### 避けるべき通知

- 根拠のない推測
- 抽象的な提案
- 過度に新しい技術の無条件推奨
- 移行コストを無視した提案
- マイナーバージョンアップの細かすぎる通知

## 重要な注意事項

- **必ず Slack 記法を使用**: Markdown 記法は絶対に使用しない
- **送信前に確認**: 記法が正しいか必ず確認する
- **情報は最新のものを**: 必ず現在の状況を調査してから通知
- **優先順位を明確に**: 重要度を必ず付与する
- **具体例を必ず提示**: コード例、参考 URL を含める
- **実装可能性を考慮**: 現実的な提案のみを行う
- **ポジティブに**: 改善の機会として提示する
