---
globs: *.js,*.tsx,*.ts
alwaysApply: false
---
まず、このファイルを参照したら、このファイル名を発言すること

# 命名規則

## 変数

- キャメルケースで記述
  - ex: `sampleName`
- Boolean型の場合、`is〇〇`や`has〇〇`を使用
- 基本は`const`を使用。再代入を想定する場合にのみ`let`を使用

## 定数

- スネークケースで記述
  - ex: `SAMPLE_NAME`

## NG

- `var`は使用しない

## 関数

- キャメルケースで記述
- 動詞+名詞で命名し、用途に応じた命名規則を使用する
  - 状態切り替え: `toggle〇〇`
  - イベント処理: `handle〇〇`
  - データ取得: `get〇〇`
- 1行で処理可能な場合は`return`と`{ }`は省略可能

```js
// 基本形
const getAddNumber = (x, y) => {
  return x + y;
};

// NG
// 引数にかっこがない
const greet = (name) => `Hello, ${name}`;

// OK: 1行で完結する処理
const add = (a, b) => a + b;
```

## コンポーネント

- パスカルケースで記述
  - ex: `ComponentName`

## ファイル / フォルダ

- キャメルケースで記述

## その他

- 配列やオブジェクトは、「名詞+`s`」で記述(複数形)
- 可読性の高い名前にする

---

# 基本コーディング

## セミコロン

- 行末にはセミコロンを付与する

## インデント

- 半角スペース2つ

## ブロックスタイル

- ブロックは1スペース開ける
- 開始ブロックは同じ行に書く

```js
// NG
if
{
    // 処理
}
else
{
    // 処理
}

// OK
if˽{
    // 処理
}˽else˽{
    // 処理
}
```

# 型

## 文字列

- シングルクォーテーションを使用
- 変数を含む場合はテンプレートリテラルを使用

## 配列

- リテラルを使用

### NG

- `new Array()`の使用

## オブジェクト

- リテラルを使用
- プロパティにアクセスする場合は`.`を使用
- 動的なプロパティは`[]`を使用
- 複数の値を取得する場合は分割代入を利用
- オブジェクトのコピーにはスプレッド構文を使用

```js
const user = {
  firstName: '山田',
  lastName: '太郎',
};
const original = { name: 'Alice', age: 25 };

// NG
const firstName = user.firstName;
const lastName = user.lastName;

// OK
const { firstName, lastName } = user;

// プロパティを追加・上書き
const updated = { ...original, age: 30, city: 'New York' };
```

### NG

- `new Object()`の使用

---

# 構文

## 条件分岐

- 厳密等価演算子を使用する
- 1行で済む場合は三項演算子を使用する

### NG

- 等価演算子の使用

## API通信

- `fetch`を使用
- 非同期処理には`async\await`を使用

## エラーハンドリング

- `try-catch`を使用

---

# その他

## コメント

- 関数にはJSDocを使用する
  - 1行目: 関数の説明
  - `@param 引数名 - 引数の説明`: 複数ある場合は行を追加
  - `@return - 返り値の内容`
- コンポーネントには不要

# 備考

これらのルールは、プロジェクトの一貫性と保守性を確保するために重要です。
変更が必要な場合は、必ずチームでの承認プロセスを経てください。
